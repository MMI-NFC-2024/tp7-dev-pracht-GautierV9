---
import populationMain from "../../assets/populationMain.json";

const listePeriode = [...new Set(populationMain?.map((d) => d.Période))].reverse();
const listeSexe = [...new Set(populationMain?.map((d) => d.Sexe))];
const listeAge = [...new Set(populationMain?.map((d) => d.Âge))];
---

<div class="flex flex-col items-center gap-4">
  <div class="flex gap-2">
    <select id="periode">
      {listePeriode.map((p, i) => <option selected={i === 0}>{p}</option>)}
    </select>
    <select id="sexe">
      {listeSexe.map((s, i) => <option selected={i === 0}>{s}</option>)}
    </select>
    <select id="age">
      {listeAge.map((a, i) => <option selected={i === 0}>{a}</option>)}
    </select>
  </div>

  <div id="plot" class="w-full max-w-4xl"></div>
</div>

<script>
  import * as Plot from "@observablehq/plot";
  import departements from "../../assets/departements.geojson.json";
  import populationMain from "../../assets/populationMain.json";

  const plotContainer = document.getElementById("plot");
  const elmYear = document.getElementById("periode");
  const elmSex = document.getElementById("sexe");
  const elmAge = document.getElementById("age");

  function renderPlot() {
    const selectedYear = Number(elmYear.value);
    const selectedSex = elmSex.value;
    const selectedAge = elmAge.value;

    const plot = Plot.plot({
      projection: {
        type: "mercator",
        domain: departements,
      },
      color: {
        type: "quantile",
        n: 8,
        scheme: "Greens",
        label: "Population en centaine de milliers",
        legend: true,
        transform: (d) => Math.round(d / 100000),
      },
      marks: [
        Plot.geo(departements, {
          fill: (d) => {
            const deptName = d.properties.nom;
            const popData = populationMain.find(
              (p) =>
                p.Géographie === deptName &&
                p.Période === selectedYear &&
                p.Sexe === selectedSex &&
                p["Âge"] === selectedAge
            );
            return popData?.Valeur;
          },
          stroke: "#999",
          title: (d) => {
            const deptName = d.properties.nom;
            const popData = populationMain.find(
              (p) =>
                p.Géographie === deptName &&
                p.Période === selectedYear &&
                p.Sexe === selectedSex &&
                p["Âge"] === selectedAge
            );
            return `${deptName} : ${popData?.Valeur ?? "N/A"}`;
          },
          tip: true,
        }),
      ],
    });

    plotContainer.innerHTML = ""; // clear old plot
    plotContainer.appendChild(plot);
  }

  // initial render
  renderPlot();

  // update when select changes
  elmYear.addEventListener("change", renderPlot);
  elmSex.addEventListener("change", renderPlot);
  elmAge.addEventListener("change", renderPlot);
</script>